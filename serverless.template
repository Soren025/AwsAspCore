{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Transform":"AWS::Serverless-2016-10-31",
    "Description":"An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",
    "Parameters":{
        "MoviesTableName": {
            "Type": "String",
            "Default": "movies",
            "Description": "Name for table that holds questions and answers",
            "MinLength": "3",
            "MaxLength": "50",
            "AllowedPattern": "^[A-Za-z_.-]+$"
        },
        "ImageStorageBucketName": {
            "Type": "String",
            "Default": "image-storage",
            "Description": "Name of the S3 bucket used to store images",
            "MinLength": "3",
            "MaxLength": "50",
            "AllowedPattern": "^[A-Za-z_.-]+$"
        },
        "CognitoUserPoolId": {
            "Type": "AWS::SSM::Parameter::Value<String>",
            "Default": "/Codari/AwsAspCore/Cognito/UserPoolId"
        },
        "CognitoUserPoolClientId": {
            "Type": "AWS::SSM::Parameter::Value<String>",
            "Default": "/Codari/AwsAspCore/Cognito/UserPoolClientId"
        },
        "CognitoUserPoolClientSecret": {
            "Type": "AWS::SSM::Parameter::Value<String>",
            "Default": "/Codari/AwsAspCore/Cognito/UserPoolClientSecret"
        }
    },
    "Resources":{

        "MoviesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "MoviesTableName"
                },
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "BillingMode": "PAY_PER_REQUEST"
            }
        },

        "ImageStorage": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "ImageStorageBucketName"
                }
            }
        },

        "AspNetCoreHttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
                "Name": "aws-asp-core-webapp",
                "ProtocolType": "HTTP"
            }
        },
        "AspNetCoreHttpStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true
            }
        },
        "AspNetCoreHttpApiMapping": {
            "Type" : "AWS::ApiGatewayV2::ApiMapping",
            "Properties" : {
                "DomainName": "awsaspcore.codari.co",
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "Stage": {
                    "Ref": "AspNetCoreHttpStage"
                }
            }
        },
        "AspNetCoreHttpApiMappingWWW": {
            "Type" : "AWS::ApiGatewayV2::ApiMapping",
            "Properties" : {
                "DomainName": "www.awsaspcore.codari.co",
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "Stage": {
                    "Ref": "AspNetCoreHttpStage"
                }
            }
        },
        "AspNetCoreHttpRootRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "RouteKey": "ANY /",
                "Target": {
                    "Fn::Sub": "integrations/${AspNetCoreHttpRootIntegration}"
                }
            }
        },
        "AspNetCoreHttpRootIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "PayloadFormatVersion": 2.0,
                "IntegrationUri": {
                    "Fn::Sub": [
                        "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${function}/invocations",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            },
                            "function": {
                                "Fn::GetAtt": [
                                    "AspNetCoreFunction",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreHttpProxyRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                    "Fn::Sub": "integrations/${AspNetCoreHttpProxyIntegration}"
                }
            }
        },
        "AspNetCoreHttpProxyIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "AspNetCoreHttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "PayloadFormatVersion": 2.0,
                "IntegrationUri": {
                    "Fn::Sub": [
                        "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${function}/invocations",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            },
                            "function": {
                                "Fn::GetAtt": [
                                    "AspNetCoreFunction",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "AspNetCoreFunction":{
            "Type":"AWS::Serverless::Function",
            "Properties":{
                "Handler":"AwsAspCore::AwsAspCore.LambdaEntryPoint::FunctionHandlerAsync",
                "Runtime":"dotnetcore3.1",
                "CodeUri":"",
                "MemorySize":512,
                "Timeout":30,
                "Role":null,
                "Policies":[
                    {
                        "DynamoDBCrudPolicy": {
                            "TableName": {
                                "Ref": "MoviesTable"
                            }
                        }
                    },
                    {
                        "S3CrudPolicy": {
                            "BucketName": {
                                "Ref": "ImageStorage"
                            }
                        }
                    },
                    {
                        "Statement": {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:PutParameter",
                                "ssm:GetParametersByPath"
                            ],
                            "Resource": "*"
                        }
                    },
                    {
                        "Statement": {
                            "Effect": "Allow",
                            "Action": [
                                "rekognition:*"
                            ],
                            "Resource": "*"
                        }
                    }
                ],
                "Environment":{
                    "Variables":{
                        "MOVIES_TABLE_NAME": {
                            "Ref": "MoviesTableName"
                        },
                        "IMAGE_STORAGE_BUCKET_NAME": {
                            "Ref": "ImageStorageBucketName"
                        },
                        "COGNITO_USER_POOL_ID": {
                            "Ref" : "CognitoUserPoolId"
                        },
                        "COGNITO_USER_POOL_CLIENT_ID": {
                            "Ref" : "CognitoUserPoolClientId"
                        },
                        "COGNITO_USER_POOL_CLIENT_SECRET": {
                            "Ref" : "CognitoUserPoolClientSecret"
                        }
                    }
                }
            }
        },
        "AspNetCoreFunctionPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "AspNetCoreFunction"
                },
                "Principal": "apigateway.amazonaws.com"
            }
        }
    },
    "Outputs":{
        "ApiURL":{
            "Description":"API endpoint URL for Prod environment",
            "Value":{
                "Fn::Sub":"https://${AspNetCoreHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
            }
        }
    }
}